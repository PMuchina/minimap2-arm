close all
clear
[chrname_map,chrlen_map] = importfastaidx('hg38noAlt.fa.fai');


drawtheplot('groundtruth.paf',"Uni-part Index");
drawtheplot('before.140M.paf' ,"16-part Index - no merge");
drawtheplot('merge.140M.paf',"16-part Index - with merge");



function drawtheplot(filename,titlestr)

    colors=get(0,'DefaultAxesColorOrder');

    [~,QueryLen,QueryStart,QueryEnd,strand,RefName,RefLen,RefStart,RefEnd,~,~,MapQ,AlignmentType] = importpaf(filename);
    [chrname_map,chrlen_map] = importfastaidx('hg38noAlt.fa.fai');
    
    figure
    hold on
    set(gca,'FontSize', 14)
    %plot([0 QueryLen(1)], [0 0]);
    title(titlestr);
    xlabel('read');
    ylabel('reference');
    ylim([0,sum(chrlen_map)]);
    plot([0 0], [0 0],'LineWidth',1,'color',colors(5,:));
    plot([0 0], [0 0],'LineWidth',1,'color',colors(1,:));
    plot([0 0], [0 0],'LineWidth',1,'color',colors(3,:));
    plot([0 0], [0 0],'LineWidth',1,'color',colors(7,:));

    
    
    for i=1:length(QueryLen)
        if(strcmp(AlignmentType(i),'tp:A:P'))
            hgcoordstart=getchrcoordinate(chrname_map,chrlen_map,RefName(i), RefStart(i));
            hgcoordend=getchrcoordinate(chrname_map,chrlen_map,RefName(i), RefEnd(i));
            if (hgcoordstart>0 )
                if(strcmp(strand(i),'-'))
                    plot([QueryStart(i) QueryEnd(i)], [hgcoordstart hgcoordend],'LineWidth',5,'color',colors(1,:));
                elseif (strcmp(strand(i),'+'))
                    plot([QueryStart(i) QueryEnd(i)], [hgcoordstart hgcoordend],'LineWidth',5,'color',colors(5,:)); 
                end
            end
           

        elseif(strcmp(AlignmentType(i),'tp:A:S'))
            hgcoordstart=getchrcoordinate(chrname_map,chrlen_map,RefName(i), RefStart(i));
            hgcoordend=getchrcoordinate(chrname_map,chrlen_map,RefName(i), RefEnd(i));
            if (hgcoordstart>0 )
                if(strcmp(strand(i),'-'))
                    plot([QueryStart(i) QueryEnd(i)], [hgcoordstart hgcoordend],'LineWidth',5,'color',colors(7,:));
                elseif (strcmp(strand(i),'+'))
                    plot([QueryStart(i) QueryEnd(i)], [hgcoordstart hgcoordend],'LineWidth',5,'color',colors(3,:)); 
                end
            end  
        end
    end
    
    legend('Primary +', 'Primary -', 'Secondary +', 'Secondary -');

end

function coord=getchrcoordinate(chrname_map,chrlen_map,current_chrname, current_chr_po)

coord=0;
for i=1:length(chrname_map)
    if(strcmp(current_chrname,chrname_map(i)))
       coord=coord+current_chr_po;
       break; 
    else
       coord=coord+chrlen_map(i);
    end
end

if (coord>=sum(chrlen_map))
    fprintf('%s discarded\r\n',current_chrname);
    coord=-1;
end
end

function [QueryName,QueryLen,QueryStart,QueryEnd,strand,RefName,RefLen,RefStart,RefEnd,NumMatchBase,NumMatchBaseIncGap,MapQ,AlignmentType] = importpaf(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [QUERYNAME,QUERYLEN,QUERYSTART,QUERYEND,STRAND,REFNAME,REFLEN,REFSTART,REFEND,NUMMATCHBASE,NUMMATCHBASEINCGAP,MAPQ,ALIGNMENTTYPE]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [QUERYNAME,QUERYLEN,QUERYSTART,QUERYEND,STRAND,REFNAME,REFLEN,REFSTART,REFEND,NUMMATCHBASE,NUMMATCHBASEINCGAP,MAPQ,ALIGNMENTTYPE]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [QueryName,QueryLen,QueryStart,QueryEnd,strand,RefName,RefLen,RefStart,RefEnd,NumMatchBase,NumMatchBaseIncGap,MapQ,AlignmentType] = importfile('groundtruth.paf',1, 41);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/06/23 14:55:20

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format for each line of text:
%   column1: text (%s)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: text (%s)
%	column6: text (%s)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%f%f%f%s%s%f%f%f%f%f%f%s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
QueryName = dataArray{:, 1};
QueryLen = dataArray{:, 2};
QueryStart = dataArray{:, 3};
QueryEnd = dataArray{:, 4};
strand = dataArray{:, 5};
RefName = dataArray{:, 6};
RefLen = dataArray{:, 7};
RefStart = dataArray{:, 8};
RefEnd = dataArray{:, 9};
NumMatchBase = dataArray{:, 10};
NumMatchBaseIncGap = dataArray{:, 11};
MapQ = dataArray{:, 12};
AlignmentType = dataArray{:, 13};

end


function [chrname,chrlen] = importfastaidx(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [CHRNAME,CHRLEN] = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   [CHRNAME,CHRLEN] = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   [chrname,chrlen] = importfile('hg38noAlt.fa.fai',1, 25);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/06/25 18:06:29

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 1;
    endRow = 25;
end

%% Format for each line of text:
%   column1: text (%s)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%f%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
chrname = dataArray{:, 1};
chrlen = dataArray{:, 2};

end

