clear;
close all;
clc;


 plot_graph('sam.fig','sam',3916598);
 plot_graph('paf.fig','paf',3916598);

function plot_graph(Figname,samorpaf,numreads)
fig=figure;
data=readevalfile(sprintf('groundtruth.%s.eval',samorpaf));
hold on
grid on
set(gca,'xscale','log')
colors=get(0,'DefaultAxesColorOrder');
plot(data(:,5),data(:,6)./numreads,'-p','LineWidth',1,'MarkerSize',2,'color',colors(1,:));
name={'ground truth','1700M', '850M', '350M', '140M'};
name2={'single part index', '2 part index','4 part index','8 part index','16 part index'};
legendname{1}=name2{1};
j=2;
for i=2:length(name)
    filename=sprintf('merge.%s.%s.eval',name{i},samorpaf);
    data=readevalfile(filename);
    legendname{j}=sprintf('merged - %s',name2{i});
    plot(data(:,5),data(:,6)./numreads,'-','LineWidth',1,'MarkerSize',1,'color',colors(mod(i,length(colors)),:));
    j=j+1;
    
	filename=sprintf('before.%s.%s.eval',name{i},samorpaf);
	data=readevalfile(filename);
	plot(data(:,5),data(:,6)./numreads,'--','LineWidth',1,'MarkerSize',5,'color',colors(mod(i,length(colors)),:)); 
	legendname{j}=sprintf('without merge - %s',name2{i});
	j=j+1;
        
end
titlename=sprintf('%s output for %d synthetic long reads',samorpaf,numreads);
title(titlename);
legend(legendname,'Location','southeast');
xlabel('Error rate of mapped reads');
ylabel('Fraction of mapped reads')
saveas(fig,Figname);
end

function before = readevalfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   BEFORE = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   BEFORE = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   before = importfile('before.450M.sam.eval', 1, 62);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/04/24 14:24:48

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
before = cell2mat(raw);

end